@model personal_web.Models.Blog

@{
    ViewBag.Title = "Create";
}

@{ 
    string succesMessage = TempData["Sucess"] as string;
    string errorMessage = TempData["Fail"] as string;
}

@{ 
    if (!string.IsNullOrEmpty(succesMessage))
    {
    <div class="alert alert-success alert-fixed" role="alert">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <strong>Sucess!</strong> '@succesMessage'.

    </div>

    }

    if (!string.IsNullOrEmpty(errorMessage))
    {
<div class="alert alert-danger" role="alert">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    <strong>Error!</strong> '@errorMessage'.
</div>
    }
}


<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item">
        <a class="nav-link active" id="home-tab" data-toggle="tab" href="#home" role="tab" aria-controls="home" aria-selected="true"><h6>Blog Create</h6></a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="details-tab" data-toggle="tab" href="#details" role="tab" aria-controls="details" aria-selected="false"><h6>Blogs Detais Index</h6></a>
    </li>

</ul>

<div class="tab-content mt-3" id="myTabContent">
    <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">

        @using (Html.BeginForm("Create", "Blogs", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "return upload(this);" }))
        {
            @Html.AntiForgeryToken()

            <div class="row">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                        @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        <input name="Image" value="StringImage" style="display:none;" />
                        @Html.Editor("ImageFile", new { htmlAttributes = new { @class = "form-control", type = "file" } })
                        @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.CategoryID, "Blog Category", htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @Html.DropDownList("BlogCategory", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.ShortDescription, htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        <textarea rows="2" class="form-control" id="ShortDescription" name="ShortDescription"></textarea>

                        @Html.ValidationMessageFor(model => model.ShortDescription, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-12">

                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-12" })
                    <div class="col-md-12">
                        @*@Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })*@
                        <textarea class="form-control ckeditor" id="Description" name="Description"></textarea>
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-info" />
                    <input type="reset" value="Clear" class="btn btn-secondary ml-2" />
                </div>
            </div>
        }

    </div>
    <div class="tab-pane fade" id="details" role="tabpanel" aria-labelledby="details-tab">
        @Html.Action("Index", "Blogs")
    </div>
</div>


@section Scripts{

    <link href="~/Scripts/datatables/jquery.dataTables.min.css" rel="stylesheet" />
    <script src="~/Scripts/datatables/jquery.dataTables.min.js"></script>

    <script src="~/Scripts/tinymce/tinymce.min.js"></script>

    <script>

        $(document).ready(function () {

            @*tinymce.init({
                selector: 'textarea',
                images_upload_url: "/Blogs/Upload",
            });
            function upload(form) {
                tinymce.activeEditor.uploadImages(function (success) {
                    form.submit();
                });
                return false;
            }*@

            tinymce.init({
                selector: '#Description',  // change this value according to your HTML
                branding: false,
                custom_ui_selector: '.my-custom-button',
                height: '500',
                menubar: ' edit view insert format tools table',
                toolbar: 'undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist  | forecolor backcolor removeformat | emoticons | fullscreen  | image  link | code',
                plugins: 'print preview powerpaste casechange importcss tinydrive searchreplace autolink autosave save directionality advcode visualblocks visualchars fullscreen image link media mediaembed template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists checklist wordcount tinymcespellchecker a11ychecker imagetools textpattern noneditable help formatpainter permanentpen pageembed charmap tinycomments mentions quickbars linkchecker emoticons advtable export',
                images_upload_url: "/Blogs/Upload",
                document_base_url: "~/",

            });


            function upload(form) {
                tinymce.activeEditor.uploadImages(function (success) {
                    form.submit();
                });
                return false;
            }

            $("#BlogsIndexDetails").DataTable();



        });


    </script>



}